---
apiVersion: v1
kind: Namespace
metadata:
  name: pg-namespace
spec:
  finalizers:
  - kubernetes

---  
apiVersion: v1
items:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: postgresql
      release: postgres
    name: postgres-postgresql-master
    namespace: pg-namespace
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: postgresql
        release: postgres
        role: master
    serviceName: postgres-postgresql-headless
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: postgresql
          release: postgres
          role: master
        name: postgres-postgresql
      spec:
        containers:
        - env:
          - name: DEBUG
            value: "false"
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-password
                name: postgres-postgresql
          - name: POSTGRES_DB
            value: postgres
          image: severalnines/clustercontrol
          imagePullPolicy: IfNotPresent
        - env:
          ports:
          - containerPort: 80
            name: clustercontrol-http
            protocol: TCP
          - containerPort: 443
            name: clustercontrol-https
            protocol: TCP
          - name: BITNAMI_DEBUG
            value: "false"
          - name: POSTGRESQL_PORT_NUMBER
            value: "5432"
          - name: POSTGRESQL_VOLUME_DIR
            value: /bitnami/postgresql
          - name: PGDATA
            value: /bitnami/postgresql/data
          - name: POSTGRES_REPLICATION_MODE
            value: master
          - name: POSTGRES_REPLICATION_USER
            value: repl_user
          - name: POSTGRES_REPLICATION_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-replication-password
                name: postgres-postgresql
          - name: POSTGRES_CLUSTER_APP_NAME
            value: my_application
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-password
                name: postgres-postgresql
          - name: POSTGRES_DB
            value: dbname
          - name: POSTGRESQL_ENABLE_LDAP
            value: "no"
          image: postgres_image
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready -U "postgres" -d "dbname" -h 127.0.0.1 -p 5432
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: postgres-postgresql
          ports:
          - containerPort: 5432
            name: tcp-postgresql
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - -e
              - |
                exec pg_isready -U "postgres" -d "dbname" -h 127.0.0.1 -p 5432
                [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /dev/shm
            name: dshm
          - mountPath: /bitnami/postgresql
            name: data
        - env:
          - name: DATA_SOURCE_URI
            value: 127.0.0.1:5432/dbname?sslmode=disable
          - name: DATA_SOURCE_PASS
            valueFrom:
              secretKeyRef:
                key: postgresql-password
                name: postgres-postgresql
          - name: DATA_SOURCE_USER
            value: postgres
          image: docker.io/bitnami/postgres-exporter:0.8.0-debian-10-r99
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: metrics
          ports:
          - containerPort: 9187
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            medium: Memory
            sizeLimit: 1Gi
          name: dshm
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        storageClassName: "openebs-hostpath"
        resources:
          requests:
            storage: 40G
        volumeMode: Filesystem
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    generation: 1
    labels:
      app: postgresql
      release: postgres
    name: postgres-postgresql-slave
    namespace: pg-namespace
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: postgresql
        release: postgres
        role: slave
    serviceName: postgres-postgresql-headless
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: postgresql
          release: postgres
          role: slave
        name: postgres-postgresql
      spec:
        containers:
        - env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: POSTGRESQL_VOLUME_DIR
            value: /bitnami/postgresql
          - name: POSTGRESQL_PORT_NUMBER
            value: "5432"
          - name: PGDATA
            value: /bitnami/postgresql/data
          - name: POSTGRES_REPLICATION_MODE
            value: slave
          - name: POSTGRES_REPLICATION_USER
            value: repl_user
          - name: POSTGRES_REPLICATION_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-replication-password
                name: postgres-postgresql
          - name: POSTGRES_CLUSTER_APP_NAME
            value: my_application
          - name: POSTGRES_MASTER_HOST
            value: postgres-postgresql
          - name: POSTGRES_MASTER_PORT_NUMBER
            value: "5432"
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-password
                name: postgres-postgresql
          image: postgres_image
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready -U "postgres" -d "dbname" -h 127.0.0.1 -p 5432
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: postgres-postgresql
          ports:
          - containerPort: 5432
            name: tcp-postgresql
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - -e
              - |
                exec pg_isready -U "postgres" -d "dbname" -h 127.0.0.1 -p 5432
                [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /dev/shm
            name: dshm
          - mountPath: /bitnami/postgresql
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            medium: Memory
            sizeLimit: 1Gi
          name: dshm
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        storageClassName: "cstor-replicated"
        resources:
          requests:
            storage: 40G
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: postgres-postgresql-slave-78bc7d8bdd
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: postgres-postgresql-slave-78bc7d8bdd
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""

---
apiVersion: v1
data:
  postgresql-password: cGFzc3dvcmQ=
  postgresql-replication-password: cGFzc3dvcmQ=
kind: Secret
metadata:
  labels:
    app: postgresql
    release: postgres
  name: postgres-postgresql
  namespace: pg-namespace
  resourceVersion: "11000"
type: Opaque

---
apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app: postgresql
      release: postgres
    name: postgres-postgresql
    namespace: pg-namespace
    resourceVersion: "11836"
  spec:
    externalTrafficPolicy: Cluster
    ports:
    - name: tcp-postgresql
      port: 5432
      protocol: TCP
      targetPort: tcp-postgresql
    selector:
      app: postgresql
      release: postgres
      role: master
    sessionAffinity: None
    type: LoadBalancer
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: postgresql
      release: postgres
    name: postgres-postgresql-headless
    namespace: pg-namespace
    resourceVersion: "11004"
  spec:
    clusterIP: None
    ports:
    - name: tcp-postgresql
      port: 5432
      protocol: TCP
      targetPort: tcp-postgresql
    selector:
      app: postgresql
      release: postgres
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9187"
      prometheus.io/scrape: "true"
    labels:
      app: postgresql
      release: postgres
    name: postgres-postgresql-metrics
    namespace: pg-namespace
    resourceVersion: "11002"
  spec:
    ports:
    - name: http-metrics
      port: 9187
      protocol: TCP
      targetPort: http-metrics
    selector:
      app: postgresql
      release: postgres
      role: master
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app: postgresql
      release: postgres
    name: postgres-postgresql-read
    namespace: pg-namespace
    resourceVersion: "11830"
  spec:
    externalTrafficPolicy: Cluster
    ports:
    - name: tcp-postgresql
      port: 5432
      protocol: TCP
      targetPort: tcp-postgresql
    selector:
      app: postgresql
      release: postgres
      role: slave
    sessionAffinity: None
    type: LoadBalancer
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
